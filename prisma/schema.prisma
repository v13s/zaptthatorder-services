generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  price         Decimal        @db.Decimal(10, 2)
  originalPrice Decimal?       @db.Decimal(10, 2)
  description   String
  imageUrl      String         @map("image_url")
  category      String
  loyaltyPoints Int           @map("loyalty_points")
  stock         Int
  rating        Decimal?       @db.Decimal(2, 1)
  isNew         Boolean        @default(false) @map("is_new")
  isSale        Boolean        @default(false) @map("is_sale")
  createdAt     DateTime       @default(now()) @map("created_at")
  images        ProductImage[]
  sizes         ProductSize[]
  colors        ProductColor[]
  reviews       Review[]
  cartItems     CartItem[]

  @@map("products")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  imageUrl  String   @map("image_url")
  isPrimary Boolean  @default(false) @map("is_primary")
  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model ProductSize {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  size      String
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, size])
  @@map("product_sizes")
}

model ProductColor {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  name      String
  value     String
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, name])
  @@map("product_colors")
}

model LoyaltyTier {
  name           String           @id
  requiredPoints Int             @map("required_points")
  multiplier     Decimal         @db.Decimal(3, 2)
  perks          LoyaltyTierPerk[]

  @@map("loyalty_tiers")
}

model LoyaltyTierPerk {
  id       Int         @id @default(autoincrement())
  tierName String      @map("tier_name")
  perk     String
  tier     LoyaltyTier @relation(fields: [tierName], references: [name])

  @@map("loyalty_tier_perks")
}

model LoyaltyTransaction {
  id          Int      @id @default(autoincrement())
  date        DateTime
  type        String
  points      Int
  description String
  status      String

  @@map("loyalty_transactions")
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  value     Decimal  @db.Decimal(10, 2)
  type      String
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")

  @@map("coupons")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  phone           String?
  address         String?
  isLoyaltyMember Boolean   @default(false)
  socialLinks     Json?     // Store social links as JSON
  reviews         Review[]
  cart            Cart?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  userName  String
  rating    Int      @db.SmallInt
  comment   String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("reviews")
}

model Cart {
  id                    Int        @id @default(autoincrement())
  userId                Int        @unique
  user                  User       @relation(fields: [userId], references: [id])
  items                 CartItem[]
  subtotal              Decimal    @db.Decimal(10, 2)
  total                 Decimal    @db.Decimal(10, 2)
  estimatedLoyaltyPoints Int
  createdAt             DateTime   @default(now()) @map("created_at")
  updatedAt             DateTime   @updatedAt @map("updated_at")

  @@map("carts")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cart_items")
} 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  price         Decimal        @db.Decimal(10, 2)
  originalPrice Decimal?       @db.Decimal(10, 2)
  description   String
  image         String
  category      String
  loyaltyPoints Int            @map("loyalty_points")
  stock         Int
  rating        Decimal?       @db.Decimal(2, 1)
  isNew         Boolean        @default(false) @map("is_new")
  isSale        Boolean        @default(false) @map("is_sale")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  cartItems     CartItem[]
  colors        ProductColor[]
  images        ProductImage[]
  sizes         ProductSize[]
  reviews       Review[]
  orderItems    OrderItem[]

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  url       String
  isPrimary Boolean @default(false) @map("is_primary")
  product   Product @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  size      String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([productId, size])
  @@map("product_sizes")
}

model ProductColor {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  name      String
  value     String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([productId, name])
  @@map("product_colors")
}

model LoyaltyTier {
  name           String            @id
  requiredPoints Int               @map("required_points")
  multiplier     Decimal           @db.Decimal(3, 2)
  perks          LoyaltyTierPerk[]
  enrollments    LoyaltyEnrollment[]

  @@map("loyalty_tiers")
}

model LoyaltyTierPerk {
  id       Int         @id @default(autoincrement())
  tierName String      @map("tier_name")
  perk     String
  tier     LoyaltyTier @relation(fields: [tierName], references: [name])

  @@map("loyalty_tier_perks")
}

model LoyaltyTransaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  date        DateTime
  type        String   @db.VarChar(20)
  points      Int
  description String
  status      String   @db.VarChar(20)
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id])

  @@map("loyalty_transactions")
}

model Coupon {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  code      String   @unique
  value     Decimal  @db.Decimal(10, 2)
  type      String   @db.VarChar(20)
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")
  user      User?    @relation(fields: [userId], references: [id])

  @@map("coupons")
}

model User {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  password        String?
  phone           String?
  address         String?
  isLoyaltyMember Boolean  @default(false) @map("is_loyalty_member")
  isAdmin         Boolean  @default(false) @map("is_admin")
  socialLinks     Json?    @map("social_links")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  cart            Cart?
  reviews         Review[]
  orders          Order[]
  loyaltyEnrollment LoyaltyEnrollment?
  loyaltyTransactions LoyaltyTransaction[]
  coupons         Coupon[]

  @@map("users")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  userName  String   @map("user_name")
  rating    Int      @db.SmallInt
  comment   String
  productId Int
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Cart {
  id                     Int        @id @default(autoincrement())
  userId                 Int        @unique
  subtotal               Decimal    @db.Decimal(10, 2)
  total                  Decimal    @db.Decimal(10, 2)
  estimatedLoyaltyPoints Int        @map("estimated_loyalty_points")
  createdAt              DateTime   @default(now()) @map("created_at")
  updatedAt              DateTime   @updatedAt @map("updated_at")
  items                  CartItem[]
  user                   User       @relation(fields: [userId], references: [id])

  @@map("carts")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  status          String      @db.VarChar(20)
  totalAmount     Decimal     @db.Decimal(10, 2)
  shippingAddress String
  paymentMethod   String      @db.VarChar(50)
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  items           OrderItem[]
  user            User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @map("created_at")
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model LoyaltyEnrollment {
  userId      Int      @id
  tierName    String
  enrolledAt  DateTime @default(now()) @map("enrolled_at")
  user        User     @relation(fields: [userId], references: [id])
  tier        LoyaltyTier @relation(fields: [tierName], references: [name])

  @@map("loyalty_enrollments")
}

model LoyaltyReward {
  id             Int      @id @default(autoincrement())
  name           String
  pointsRequired Int      @map("points_required")
  description    String
  validityDays   Int      @map("validity_days")
  type           String   @db.VarChar(20)
  value          Decimal  @db.Decimal(10, 2)
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("loyalty_rewards")
}

model PaymentMethod {
  id          Int      @id @default(autoincrement())
  name        String
  icon        String
  description String
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("payment_methods")
}

model ShippingOption {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  estimatedDays Int    @map("estimated_days")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("shipping_options")
}
